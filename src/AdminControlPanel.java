import java.util.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

public class AdminControlPanel extends javax.swing.JFrame {

	private static AdminControlPanel instance = null;
	private static UserGroup root = null;
	private static DefaultTreeModel tree = null;
	
	public static AdminControlPanel getInstance() {
		if (instance == null) {
			instance = new AdminControlPanel();
		}
		
		instance.setVisible(true);
		
		return instance;
	}
	
	private AdminControlPanel() {
		root = new UserGroup("Root", System.currentTimeMillis()); // Added for Assignment 3
		initComponents();
		LoadTree();
	}
	
	private DefaultMutableTreeNode rootView;
	
	private static HashMap<String, UserGroup> listGroup = new HashMap<String, UserGroup>();
	private static HashMap<String, User> listUser = new HashMap<String, User>();
	
	private CompositeUser currentSelected;
	private User userSelected;
	private UserGroup groupSelected;
	private String addUserText;
	
	private UserCount userTotal = new UserCount();
    private GroupCount groupTotal = new GroupCount();
    private MessageCount messageTotal = new MessageCount();
    private PosMessageCount posPercentage = new PosMessageCount();
    
    // Added for Assignment 3
    private ValidUserCheck invalidUser = new ValidUserCheck();
    private MostRecentUser recentUser = new MostRecentUser();
    
    private void LoadTree() {
    	System.out.println("Loading tree");
    	
    	rootView = new DefaultMutableTreeNode(root);
    	
    	tree = (DefaultTreeModel) rootTree.getModel();
    	tree.setRoot(rootView);
    	rootTree.setModel(tree);
    }
    
    public static User getUser(String name) {
    	return listUser.get(name);
    }
    
    public static boolean userExist(String name) {
    	return listUser.containsKey(name);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addUser = new javax.swing.JButton();
        addGroup = new javax.swing.JButton();
        openUserView = new javax.swing.JButton();
        showUserTotal = new javax.swing.JButton();
        showMessageTotal = new javax.swing.JButton();
        showGroupTotal = new javax.swing.JButton();
        showPosPercent = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        userID = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        groupID = new javax.swing.JTextArea();
        TreeView = new javax.swing.JScrollPane();
        rootTree = new javax.swing.JTree();
        ValidateUser = new javax.swing.JButton();
        RecentUser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addUser.setText("Add User");
        addUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addUserMouseClicked(evt);
            }
        });

        addGroup.setText("Add Group");
        addGroup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addGroupMouseClicked(evt);
            }
        });

        openUserView.setText("Open User View");
        openUserView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openUserViewMouseClicked(evt);
            }
        });

        showUserTotal.setText("Show User Total");
        showUserTotal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showUserTotalMouseClicked(evt);
            }
        });

        showMessageTotal.setText("Show Messages Total");
        showMessageTotal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showMessageTotalMouseClicked(evt);
            }
        });

        showGroupTotal.setText("Show Group Total");
        showGroupTotal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showGroupTotalMouseClicked(evt);
            }
        });

        showPosPercent.setText("Show Positive Percentage");
        showPosPercent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                showPosPercentMouseEntered(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        userID.setColumns(20);
        userID.setRows(5);
        userID.setText("User ID");
        jScrollPane2.setViewportView(userID);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        groupID.setColumns(20);
        groupID.setRows(5);
        groupID.setText("Group ID");
        jScrollPane3.setViewportView(groupID);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        rootTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        rootTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rootTreeMouseClicked(evt);
            }
        });
        TreeView.setViewportView(rootTree);
        
        // Assignment 3
        ValidateUser.setText("Validate IDs");
        ValidateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValidateUserActionPerformed(evt);
            }
        });

        RecentUser.setText("Recent User");
        RecentUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecentUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TreeView, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(openUserView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(showMessageTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(showPosPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                    .addGap(37, 37, 37)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(addGroup, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                                        .addComponent(addUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(showUserTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                                    .addComponent(showGroupTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(ValidateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(37, 37, 37)
                            .addComponent(RecentUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TreeView, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addUser, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addGroup, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(openUserView, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(showUserTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showGroupTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(showPosPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showMessageTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ValidateUser, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                            .addComponent(RecentUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
  //This method should set up if the user clicks on the group it is current group
    private void rootTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rootTreeMouseClicked
        System.out.println("Clicked on Tree");
        
        //Getting last value you clicked
        rootView = (DefaultMutableTreeNode) rootTree.getSelectionPath().getLastPathComponent();
        currentSelected = (CompositeUser) rootView.getUserObject();
        
        //Selects an option, if user is selected, UserView can be viewed
        //if group is selected, any user/group added will be under that group.
        if (currentSelected instanceof User user) {
            System.out.println("User Selected");
            userSelected = user;
            groupSelected = null;
        }
        else if (currentSelected instanceof UserGroup group) {
            System.out.println("Group Selected");
            userSelected = null;
            groupSelected = group;
        }
    }//GEN-LAST:event_rootTreeMouseClicked

    //If add user from text area if button is pressed
    private void addUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addUserMouseClicked
        TreeSelectionModel smd = rootTree.getSelectionModel();
        
        if (smd.getSelectionCount() > 0 && groupSelected != null) {
            System.out.println("Add User Button Pressed");
            User newUser = new User(userID.getText(), System.currentTimeMillis()); // Added for Assignment 3
            
            DefaultMutableTreeNode currNode = (DefaultMutableTreeNode) rootTree.getSelectionPath().getLastPathComponent();
            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newUser);
            
            // Assignment 3
            if (listUser.containsKey(newUser.getID())) {
                invalidUser.visitUser(newUser);
            }
            
            currNode.add(newNode);
            groupSelected.addUserToGroup(newUser);
            listUser.put(newUser.getID(), newUser);
            userTotal.visitUser(newUser);
            
            DefaultTreeModel model = (DefaultTreeModel) rootTree.getModel();
            
            model.reload();
            
            System.out.println("User HashMap: " + listUser.toString());
        }
    }//GEN-LAST:event_addUserMouseClicked

    //If add group from text area if button is pressed
    private void addGroupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addGroupMouseClicked
        TreeSelectionModel smd = rootTree.getSelectionModel();
        
        if (smd.getSelectionCount() > 0 && groupSelected != null) {
            System.out.println("Add Group Button Pressed");
            UserGroup newGroup = new UserGroup(groupID.getText(), System.currentTimeMillis()); // Added for Assignment 3
            
            DefaultMutableTreeNode currNode = (DefaultMutableTreeNode) rootTree.getSelectionPath().getLastPathComponent();
            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newGroup);
            
            // Assignment 3
            if (listGroup.containsKey(newGroup.getID())) {
                invalidUser.visitGroup(newGroup);
            }
            
            currNode.add(newNode);
            listGroup.put(newGroup.getID(), newGroup);
            groupTotal.visitGroup(newGroup);
            
            DefaultTreeModel model = (DefaultTreeModel) rootTree.getModel();
            
            model.reload();
            
            System.out.println("Group HashMap: " + listGroup.toString());
        }
    }//GEN-LAST:event_addGroupMouseClicked

    //When User is selected and Open USER VIEW
    private void openUserViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openUserViewMouseClicked
        System.out.println("User View Button Pressed");
        
        if (userSelected != null) {
            User user = userSelected;
            UserView openWindow = new UserView(user);
        }
        
    }//GEN-LAST:event_openUserViewMouseClicked

    //Show user total pop-up when clicked
    private void showUserTotalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showUserTotalMouseClicked
        JFrame frame = new JFrame();
        
        JOptionPane.showMessageDialog(frame, "Total Users: " + userTotal.getTotalUser());
        
    }//GEN-LAST:event_showUserTotalMouseClicked

    //Show group total pop-up when clicked
    private void showGroupTotalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showGroupTotalMouseClicked
        JFrame frame = new JFrame();
        
        JOptionPane.showMessageDialog(frame, "Total Groups: " + groupTotal.getTotalGroup());
        
    }//GEN-LAST:event_showGroupTotalMouseClicked

    //Show message total pop-up when clicked
    private void showMessageTotalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showMessageTotalMouseClicked
        JFrame frame = new JFrame();
        
        JOptionPane.showMessageDialog(frame, "Total Messages: " + messageTotal.getTotalMessage());
        
    }//GEN-LAST:event_showMessageTotalMouseClicked

    //Show positive message percentage pop-up when clicked
    private void showPosPercentMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showPosPercentMouseEntered
        JFrame frame = new JFrame();
        
        posPercentage.visitUser(userSelected);
        
        JOptionPane.showMessageDialog(frame, "Positive Message Percentage: " + posPercentage.getPosMessage() + "%");
        
    }//GEN-LAST:event_showPosPercentMouseEntered
    
    // Assignment 3
    private void ValidateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValidateUserActionPerformed
        JFrame frame = new JFrame();
        
        JOptionPane.showMessageDialog(frame, "Invalid Users: " + invalidUser.getListOfUsers());
    }//GEN-LAST:event_ValidateUserActionPerformed

    private void RecentUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecentUserActionPerformed
        JFrame frame = new JFrame();
        long recentUserTime = 0;
        
        for (Map.Entry<String, User> currUser : listUser.entrySet()) {
            if (currUser.getValue().getLastTimeUpdatedLong() >= recentUserTime) {
                recentUserTime = currUser.getValue().getLastTimeUpdatedLong();
                recentUser.visitUser(currUser.getValue());
            }
        }
        
        JOptionPane.showMessageDialog(frame, "Most Recent User: " + recentUser.getRecentUser());
    }//GEN-LAST:event_RecentUserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminControlPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RecentUser;
    private javax.swing.JScrollPane TreeView;
    private javax.swing.JButton ValidateUser;
    private javax.swing.JButton addGroup;
    private javax.swing.JButton addUser;
    private javax.swing.JTextArea groupID;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton openUserView;
    private javax.swing.JTree rootTree;
    private javax.swing.JButton showGroupTotal;
    private javax.swing.JButton showMessageTotal;
    private javax.swing.JButton showPosPercent;
    private javax.swing.JButton showUserTotal;
    private javax.swing.JTextArea userID;
    // End of variables declaration//GEN-END:variables
}
